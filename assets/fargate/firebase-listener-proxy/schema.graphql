schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Location @aws_api_key @aws_cognito_user_pools(cognito_groups : ["Users"]) @aws_iam {
  center: Boolean
  city: String!
  key: ID!
  lat: Float!
  lng: Float!
  name: String!
  state: String!
  updatedAt: AWSDateTime!
  weather: LocationWeather!
}

type LocationWeather {
  description: String!
  feelsLike: Float!
  humidity: Int!
  iconUrl: String!
  pressure: Int!
  status: String!
  temp: Float!
  tempMax: Float!
  tempMin: Float!
  updatedAt: AWSDateTime!
}

type Mutation {
  updateLocation(input: LocationInput!): Location @aws_api_key @aws_cognito_user_pools(cognito_groups : ["Users"]) @aws_iam
  updateSession(input: SessionInput!): Session @aws_api_key @aws_cognito_user_pools(cognito_groups : ["Users"]) @aws_iam
  updateSpeaker(input: SpeakerInput!): Speaker @aws_api_key @aws_cognito_user_pools(cognito_groups : ["Users"]) @aws_iam
  updateTrack(input: TrackInput!): Track @aws_api_key @aws_cognito_user_pools(cognito_groups : ["Users"]) @aws_iam
}

type Query {
  getLocation(key: ID!): Location @aws_api_key @aws_cognito_user_pools(cognito_groups : ["Users"]) @aws_iam
  getSession(key: ID!): Session @aws_api_key @aws_cognito_user_pools(cognito_groups : ["Users"]) @aws_iam
  getSpeaker(key: ID!): Speaker @aws_api_key @aws_cognito_user_pools(cognito_groups : ["Users"]) @aws_iam
  getTrack(key: ID!): Track @aws_api_key @aws_cognito_user_pools(cognito_groups : ["Users"]) @aws_iam
  listLocations: [Location] @aws_api_key @aws_cognito_user_pools(cognito_groups : ["Users"]) @aws_iam
  listSessions: [Session] @aws_api_key @aws_cognito_user_pools(cognito_groups : ["Users"]) @aws_iam
  listSpeakers: [Speaker] @aws_api_key @aws_cognito_user_pools(cognito_groups : ["Users"]) @aws_iam
  listTracks: [Track] @aws_api_key @aws_cognito_user_pools(cognito_groups : ["Users"]) @aws_iam
}

type Session @aws_api_key @aws_cognito_user_pools(cognito_groups : ["Users"]) @aws_iam {
  date: String!
  description: String
  groupId: String!
  id: String!
  key: ID!
  likes: [String!]
  location: String!
  name: String!
  speakerNames: [String!]
  timeEnd: String!
  timeStart: String!
  tracks: [String!]!
  updatedAt: AWSDateTime!
}

type Speaker @aws_api_key @aws_cognito_user_pools(cognito_groups : ["Users"]) @aws_iam {
  about: String!
  email: String!
  id: String!
  instagram: String!
  key: ID!
  location: String!
  name: String!
  phone: String!
  profilePic: String!
  title: String!
  twitter: String!
  updatedAt: AWSDateTime!
}

type Subscription {
  updatedLocation: Location @aws_api_key @aws_cognito_user_pools(cognito_groups : ["Users"]) @aws_iam @aws_subscribe(mutations : ["updateLocation"])
  updatedSession: Session @aws_api_key @aws_cognito_user_pools(cognito_groups : ["Users"]) @aws_iam @aws_subscribe(mutations : ["updateSession"])
  updatedSpeaker: Speaker @aws_api_key @aws_cognito_user_pools(cognito_groups : ["Users"]) @aws_iam @aws_subscribe(mutations : ["updateSpeaker"])
  updatedTrack: Track @aws_api_key @aws_cognito_user_pools(cognito_groups : ["Users"]) @aws_iam @aws_subscribe(mutations : ["updateTrack"])
}

type Track @aws_api_key @aws_cognito_user_pools(cognito_groups : ["Users"]) @aws_iam {
  icon: String!
  key: ID!
  name: String!
  updatedAt: AWSDateTime!
}

input LocationInput {
  center: Boolean
  city: String
  key: ID!
  lat: Float
  lng: Float
  name: String
  state: String
  updatedAt: AWSDateTime
  weather: LocationWeatherInput
}

input LocationWeatherInput {
  description: String
  feelsLike: Float
  humidity: Int
  iconUrl: String
  pressure: Int
  status: String
  temp: Float
  tempMax: Float
  tempMin: Float
  updatedAt: AWSDateTime
}

input SessionInput {
  date: String
  description: String
  groupId: String
  id: String
  key: ID!
  likes: [String]
  location: String
  name: String
  speakerNames: [String]
  timeEnd: String
  timeStart: String
  tracks: [String]
  updatedAt: AWSDateTime
}

input SpeakerInput {
  about: String
  email: String
  id: String
  instagram: String
  key: ID!
  location: String
  name: String
  phone: String
  profilePic: String
  title: String
  twitter: String
  updatedAt: AWSDateTime
}

input TrackInput {
  icon: String
  key: ID!
  name: String
  updatedAt: AWSDateTime
}
